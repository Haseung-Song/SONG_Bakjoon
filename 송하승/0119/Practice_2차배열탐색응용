package day0119;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Practice_2차배열탐색응용 {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine()); // 진행할 테스트 횟수

		for (int t = 1; t <= T; t++) {
			int N = Integer.parseInt(br.readLine()); // 지도의 가로/세로 배열 크기

			String[][] map = new String[N][N]; // 2차 String 배열로 입력 받기.

			for (int i = 0; i < N; i++) { // 행의 수만큼 입력
				String line = br.readLine(); // 한 줄 통으로 입력받았으면
				map[i] = line.split(" "); // 공백을 기준으로 분리하여 String 1차 배열을 만들어 주면, 하나의 행으로 저장함.
			}

			// 제대로 입력되었는지 확인하기
//			for (int i = 0; i < size; i++) {
//				for (int j = 0; j < size; j++) {
//					System.out.print(map[i][j]);
//				}
//				System.out.println();
//			}
//			System.out.println("--------------------------");
			/////////////////////////////////////////////////
			// 빌딩높이 계산을 위한 작업

			for (int i = 0; i < N; i++) { // 행
				for (int j = 0; j < N; j++) { // 열
					int ans = 0;
					int height = 2;

					// 현재 기준 내 위쪽 칸
					if (i - 1 >= 0 && map[i - 1][j] == "G") {
						System.out.println(height);

						// 현재 기준 내 오른쪽 칸
					} else if (j + 1 < map[i].length && map[i][j + 1] == "G") {
						System.out.println(height);

						// 현재 기준 내 아래쪽 칸
					} else if (i + 1 < map[i].length && map[i + 1][j] == "G") {
						System.out.println(height);

						// 현재 기준 내 왼쪽 칸
					} else if (j - 1 >= 0 && map[i][j - 1] == "G") {
						System.out.println(height);

						// 현재 기준 내 위쪽/오른쪽 대각선 칸
					} else if (i - 1 >= 0 && j + 1 < map[i].length && map[i - 1][j + 1] == "G") {
						System.out.println(height);

						// 현재 기준 내 위쪽/왼쪽 대각선 칸
					} else if (i - 1 >= 0 && j - 1 >= 0 && map[i - 1][j - 1] == "G") {
						System.out.println(height);

						// 현재 기준 내 아래쪽/오른쪽 대각선 칸
					} else if (i + 1 < map[i].length && j + 1 < map[i].length && map[i + 1][j + 1] == "G") {
						System.out.println(height);

						// 현재 기준 내 아래쪽/왼쪽 대각선 칸
					} else if (i + 1 < map[i].length && j - 1 >= 0 && map[i + 1][j - 1] == "G") {
						System.out.println(height);

						// 그 밖의 경우(인접한 구획에 "G"가 없는 경우)
					} else {
						for (int k = 0; k < N; k++) { // 행
							if (map[j][k] == "B")
								height++;
							if (map[k][j] == "B")
								height++;

						}
						height--; // 현재 중심칸 B가 2번 카운트 됨.
					}
					ans = Math.max(ans, height);

				}
			}

		}
		
		System.out.println("#" + );

	}

}
