package day0119;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class 실습2_2공원_string버전 {

	public static void main(String[] args) throws NumberFormatException, IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // 입출력 함수

		int T = Integer.parseInt(br.readLine()); // 진행할 테스트 횟수

		for (int t = 1; t <= T; t++) {
			int N = Integer.parseInt(br.readLine()); // 지도의 가로/세로 배열 크기

			String[][] map = new String[N][N]; // 2차 String 배열로 입력 받기.

			for (int i = 0; i < N; i++) { // 행의 수만큼 입력
				String line = br.readLine(); // 한 줄 통으로 입력받았으면
				map[i] = line.split(" "); // 공백을 기준으로 분리하여 String 1차 배열을 만들어 주면, 하나의 행으로 저장함.

			}

			// 제대로 입력했는지 확인
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					System.out.print(map[i][j]);
				}
				System.out.println();

			}
			System.out.println("--------------------------");

			/////////////////////////////////////////////////
			////////////// 빌딩높이 계산을 위한 작업 ////////////////

			int ans = 0; // 결과 값 초기화

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == "B") { // i,j 칸에 B라고 적혀있는 애만 관심있음.
						int now = 2;
						boolean isPark = false;
						if (i - 1 >= 0 && map[i - 1][j] == "G") // 상
							isPark = true;
						else if (i - 1 >= 0 && j + 1 < N && map[i - 1][j + 1] == "G") // 우상
							isPark = true;
						else if (j + 1 < N && map[i][j + 1] == "G") // 우
							isPark = true;
						else if (i + 1 < N && j + 1 < N && map[i + 1][j + 1] == "G") // 우하
							isPark = true;
						else if (i + 1 < N && map[i + 1][j] == "G") // 하
							isPark = true;
						else if (j - 1 >= 0 && i + 1 < N && map[i + 1][j - 1] == "G") // 좌하
							isPark = true;
						else if (j - 1 >= 0 && map[i][j - 1] == "G") // 좌
							isPark = true;
						else if (i - 1 >= 0 && j - 1 >= 0 && map[i - 1][j - 1] == "G")// 좌상
							isPark = true;

						if (isPark == false) { // 와.. 주변에 공원 없나봄 ..
							now = 0;
							for (int k = 0; k < N; k++) {
								if (map[i][k] == "B")
									now++;
								if (map[k][j] == "B")
									now++;
							}
							now--; // 현재 중심칸 B가 두번 카운트됨.
						}
						ans = Math.max(ans, now);
					}
				}
			}

			System.out.println("#" + t + " " + ans); // 현재 테스트 맵에서 가능한 최대 빌딩높이출력
		}
	}
}
