package IM_TEST;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Solution {
	static int n; // 정적 변수 int n 설정
	static char[][] map; // 정적 변수 2차원 배열 char[][] map 설정

	public static void main(String[] args) throws FileNotFoundException {
		System.setIn(new FileInputStream("기지국_input.txt")); // 파일 가져오기

		Scanner sc = new Scanner(System.in); // 입출력 함수 생성

		int TC = sc.nextInt(); // 반복할 테스트 횟수

		for (int tc = 1; tc <= TC; tc++) { // 반복할 테스트 횟수만큼
			int cnt = 0; // 변수 초기화
			n = sc.nextInt();
			map = new char[n][n];

			// 입력
			String s;
			for (int i = 0; i < n; i++) {
				s = sc.next(); // 문자열 읽기
//				 X X X X X X X X X
				for (int j = 0; j < n; j++) {
					map[i][j] = s.charAt(j);

				}

			} // 읽기 완성

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					System.out.print(map[i][j] + " ");

				}
				System.out.println();

			}

			// 처리 -1 : 기지국 처리 => 기지국 처리된 집(H => X), 처리되지 않은 집(H)
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					// 기지국이 아니면, 제외하고 실행한다.
					if (map[i][j] == 'X' || map[i][j] == 'H') {
						continue;

					}

					// 기지국(A(1), B(2), C(3))
					// 문자 'A'를 빼면 숫자 0이 된다.
					// 문자 'B' = 1;
					// 문자 'C' = 2;
					for (int k = 1; k < map[i][j] - 'A' + 2; k++) { // 기지국에 따라 반복 횟수 결정
						// 동 방
						if (j + k < n && map[i][j + k] == 'H') {
							map[i][j + k] = 'X';

						}

						// 서 방
						if (j - k >= 0 && map[i][j - k] == 'H') {
							map[i][j - k] = 'X';

						}

						// 남 방
						if (i + k < n && map[i + k][j] == 'H') {
							map[i + k][j] = 'X';

						}

						// 북 방
						if (i - k >= 0 && map[i - k][j] == 'H') {
							map[i - k][j] = 'X';

						}
					}
				}
			}

			// 처리 -2 : 빈 집 세기
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					// 집(H)이면 cnt 누적
					if (map[i][j] == 'H') {
						cnt++; // 카운트 증가

					}

				}
			}
			// 출력
			System.out.println("#" + tc + " " + cnt);

		}
		sc.close(); // 입출력 함수 종료

	}

}
